version: '3.8'

services:
  # Aplicação Node.js para desenvolvimento
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api_app_dev
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: api_db
      DB_USER: postgres
      DB_PASSWORD: password
    ports:
      - "3001:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - api_network
    volumes:
      # Mount do código para hot reload
      - ./src:/app/src
      - ./scripts:/app/scripts
      - ./package.json:/app/package.json
      - ./package-lock.json:/app/package-lock.json
      # Volume nomeado para node_modules (evita conflitos)
      - node_modules_dev:/app/node_modules
    command: npm run dev
    restart: unless-stopped

  # Banco PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: api_postgres_dev
    environment:
      POSTGRES_DB: api_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    networks:
      - api_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d api_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # PgAdmin para desenvolvimento
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: api_pgadmin_dev
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - api_network
    restart: unless-stopped

volumes:
  postgres_data_dev:
  node_modules_dev:

networks:
  api_network:
    driver: bridge